import { AggregateRoot } from "../../../core/domain/AggregateRoot";
import { UniqueEntityID } from "../../../core/domain/UniqueEntityID";
import { Result } from "../../../core/logic/Result";
import { Guard } from "../../../core/logic/Guard";
import {Money} from './money';

interface TransactionProps {
   /** A unique Transaction id coming from the api */
    TransactionID: string;
   /** A Customer id who initiated the transaction  */  
    CustomerID:string,
   /** A Transaction input Having Amount and Currency  */   
    input :Money
     /** A Transaction Output Having Amount and Currency  */  
    output:Money
      /** A Transaction Date Generated by System  */ 
    transactionDate:string ,
      /** A Transactionref Generated by system for a Particular Transaction  */ 
    Transactionref? :string
}

/**
 * Transaction  Entity Class
 *
 */

export class Transaction extends AggregateRoot<TransactionProps> {
 
    get TransactionID (): string {
        return this.TransactionID;
    }

    get CustomerID (): string {
        return this.CustomerID;
    }

    get amount (): number {
        return this.amount;
    }

    get currency (): number {
        return this.currency;
    }

    get input (): Money {
        return this.input;
    }

    get output (): Money {
        return this.output;
    }
    get transactionDate() :string {
        return this.transactionDate;
    }

    set Transactionref (value: string) {
        this.props.Transactionref = value;
    }

    get Transactionref() :string {
        return this.Transactionref;
    }

    private constructor (props: TransactionProps, id?: UniqueEntityID) {
        super(props, id);
    }

    public static create (props: TransactionProps, id?: UniqueEntityID): Result<Transaction> {

        const guardedProps = [
            { argument: props.CustomerID, argumentName: 'CustomerID' },
            { argument: props.TransactionID, argumentName: 'TransactionID' },
            { argument: props.transactionDate, argumentName: 'transactionDate' }
          ];
          const guardResult = Guard.againstNullOrUndefinedBulk(guardedProps);
          if (!guardResult.succeeded) {
            return Result.fail<Transaction>(guardResult.message)
          } 

          else {
            const tran = new Transaction({
              ...props,
              Transactionref:id.toString()
            }, id);

            return Result.ok<Transaction>(tran);
          }


    }

}
